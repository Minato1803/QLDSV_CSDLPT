using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using System.Collections;
using System.Data.SqlClient;

namespace QLSV
{
    public partial class FormMonHoc : DevExpress.XtraEditors.XtraForm
    {
        private int pos = 0;
        private Boolean flag = false; // true = add ; false = update ; default of boolean = false
        private string oldMaMonHoc = "";
        private string oldTenMonHoc = "";
        Stack undoBds = new Stack();

        public FormMonHoc()
        {
            InitializeComponent();
            // This line of code is generated by Data Source Configuration Wizard
            // Fill the SqlDataSource asynchronously
            sqlDataSource1.FillAsync();
        }

        private void FormMonHoc_Load(object sender, EventArgs e)
        {
            addBtn.Enabled
                = deleteBtn.Enabled
                = adjustBtn.Enabled
                = undoBtn.Enabled
                = reloadBtn.Enabled
                = quitFormBtn.Enabled = true;
            saveBtn.Enabled
                = exitBtn.Enabled = false;
               
            // TODO: This line of code loads data into the 'qLDSVDataSet.DIEM' table. You can move, or remove it, as needed.
            this.dIEMTableAdapter.Fill(this.qLDSVDataSet.DIEM);
            // TODO: This line of code loads data into the 'qLDSVDataSet.MONHOC' table. You can move, or remove it, as needed.
            this.mONHOCTableAdapter.Connection.ConnectionString = Program.connstr;
            this.mONHOCTableAdapter.Fill(this.qLDSVDataSet.MONHOC);

        }

        private void quitFormBtn_Click(object sender, EventArgs e)
        {
            if (this.groupEdit.Enabled)
            {
                DialogResult dr = MessageBox.Show(" Dữ liệu Môn Học chưa lưu vào Database. \n Bạn có chắc muốn thoát !", "Cảnh báo", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
                if (dr == DialogResult.No)
                {
                    return;
                }
                else if (dr == DialogResult.Yes)
                {
                    this.Close();

                }
            }
            else
            {
                this.Close();
                return;
            }
        }

        private void viewDanhSachMon_FocusedRowChanged(object sender, DevExpress.XtraGrid.Views.Base.FocusedRowChangedEventArgs e)
        {
            if(viewDanhSachMon.SelectedRowsCount > 0)
            {
                maMon.Text = viewDanhSachMon.GetFocusedDataRow()["MAMH"].ToString();
                tenMon.Text = viewDanhSachMon.GetFocusedDataRow()["TENMH"].ToString();
                pos = mONHOCBindingSource.Position;
            }
        }

        private void adjustBtn_Click(object sender, EventArgs e)
        {
            flag = false;//  Update 
            oldMaMonHoc = this.maMon.Text.Trim().ToString();
            oldTenMonHoc = this.tenMon.Text.Trim().ToString();

            saveBtn.Enabled = exitBtn.Enabled = true;

            addBtn.Enabled
                = deleteBtn.Enabled
                = adjustBtn.Enabled
                = undoBtn.Enabled
                = reloadBtn.Enabled = false;

            danhSachMon.Enabled = false;
            tuyChinh.Enabled
                = groupEdit.Enabled = true;
            tenMon.Select(tenMon.Text.Length,0);
        }

        private void exitBtn_Click(object sender, EventArgs e)
        {
            //xóa trạng thái
            mONHOCBindingSource.CancelEdit();

            FormMonHoc_Load(sender, e);
            if (pos > 0)
            {
               mONHOCBindingSource.Position = pos;
            }

            danhSachMon.Enabled = true;
            groupEdit.Enabled = false;
        }

        private void addBtn_Click(object sender, EventArgs e)
        {
            flag = true;  // Add

            saveBtn.Enabled = exitBtn.Enabled = true;
            addBtn.Enabled
                = deleteBtn.Enabled
                = adjustBtn.Enabled
                = undoBtn.Enabled
                = reloadBtn.Enabled = false;

            tuyChinh.Enabled 
                = groupEdit.Enabled = true;
            danhSachMon.Enabled = false;
            maMon.Focus();
            // TODO : Thao tác chuẩn bị thêm
            undoBds.Push(mONHOCBindingSource);
            mONHOCBindingSource.AddNew();
        }

        private void deleteBtn_Click(object sender, EventArgs e)
        {
            if (fKDIEMMONHOC1BindingSource.Count > 0)
            {
                MessageBox.Show("Không thể xóa môn học này vì đang chứa điểm.", "", MessageBoxButtons.OK);
                return;
            }
            if (MessageBox.Show("Bạn có thực sự muốn xóa Môn này?", "Xác nhận.", MessageBoxButtons.OKCancel) == DialogResult.OK)
            {
                try
                {
                    undoBds.Push(mONHOCBindingSource);
                    mONHOCBindingSource.RemoveCurrent();
                    this.mONHOCTableAdapter.Connection.ConnectionString = Program.connstr;
                    this.mONHOCTableAdapter.Update(this.qLDSVDataSet.MONHOC);
                    this.mONHOCBindingSource.ResetCurrentItem();// tự động render để hiển thị dữ liệu mới
                }
                catch (Exception ex)
                {
                    MessageBox.Show("Lỗi xóa môn học.\nBạn hãy xem lại\n" + ex.Message, "", MessageBoxButtons.OK);
                }


            }
            if (pos > 0)
            {

                mONHOCBindingSource.Position = pos;
            }
        }

        private void saveBtn_Click(object sender, EventArgs e)
        {
            bool check = checkInfoMONHOC();
            if (check)
            {
                DialogResult dr = MessageBox.Show("Bạn có chắc muốn ghi dữ liệu vào Database?", "Thông báo",
                    MessageBoxButtons.OKCancel, MessageBoxIcon.Question);
                if (dr == DialogResult.OK)
                {
                    try
                    {
                        addBtn.Enabled
                        = deleteBtn.Enabled
                        = adjustBtn.Enabled
                        = undoBtn.Enabled
                        = reloadBtn.Enabled = true;

                        danhSachMon.Enabled = true;
                        groupEdit.Enabled = false;

                        this.mONHOCBindingSource.EndEdit();
                        this.mONHOCBindingSource.ResetCurrentItem();// tự động render để hiển thị dữ liệu mới
                        this.mONHOCTableAdapter.Update(this.qLDSVDataSet.MONHOC);

                    }
                    catch (Exception ex)
                    {
                        mONHOCBindingSource.RemoveCurrent();
                        MessageBox.Show("Ghi dữ liệu thất lại. Vui lòng kiểm tra lại!\n" + ex.Message, "Error",
                            MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }

            }
            else
            {
                return;
            }
        }

        private void undoBtn_Click(object sender, EventArgs e)
        {
            this.mONHOCBindingSource = (BindingSource) undoBds.Pop();
            this.mONHOCTableAdapter.Connection.ConnectionString = Program.connstr;
            this.mONHOCTableAdapter.Update(this.qLDSVDataSet.MONHOC);
            this.mONHOCBindingSource.ResetCurrentItem();
        }

        private void reloadBtn_Click(object sender, EventArgs e)
        {
            FormMonHoc_Load(sender, e);
            MessageBox.Show("Làm mới dữ liệu thành công", "", MessageBoxButtons.OK);
        }


        private bool checkInfoMONHOC()
        {

            // TODO : Check khoảng trống ở textField
            if (maMon.Text.Trim().Equals(""))
            {
                this.errorMaMon.SetError(maMon, "Mã môn học không được để trống!");
                return false;
            }
            if (tenMon.Text.Trim().Equals(""))
            {
                this.errorTenMon.SetError(tenMon, "Tên môn học không được để trống");
                return false;
            }


            if (flag) // add
            {
                //TODO: Check mã môn học có tồn tại chưa
                string queryMa = "DECLARE  @return_value int \n"
                            + "EXEC @return_value = SP_CHECKID \n"
                            + "@Code = N'" + maMon.Text + "',@Type = N'MAMONHOC' \n"
                            + "SELECT 'Return Value' = @return_value";

                int result = -1;
                SqlDataReader dataReader = Program.ExecSqlDataReader(queryMa);

                // nếu null thì thoát luôn  ==> lỗi kết nối
                if (dataReader == null)
                {
                    MessageBox.Show("Lỗi kết nối với database. Mời bạn xem lại", "", MessageBoxButtons.OK);
                    this.Close();
                }
                dataReader.Read();
                result = int.Parse(dataReader.GetValue(0).ToString());
                dataReader.Close();

                if (result == 1)
                {
                    this.errorMaMon.SetError(maMon, "Mã môn học đã tồn tại!");
                    return false;
                }

                // TODO : Check tên môn học có tồn tại chưa
                string queryTen = "DECLARE  @return_value int \n"
                            + "EXEC @return_value = SP_CHECKNAME \n"
                            + "@Name = N'" + tenMon.Text + "',@Type = N'TENMONHOC' \n"
                            + "SELECT 'Return Value' = @return_value";

                result = -1;
                dataReader = Program.ExecSqlDataReader(queryTen);

                // nếu null thì thoát luôn  ==> lỗi kết nối
                if (dataReader == null)
                {
                    MessageBox.Show("Lỗi kết nối với database. Mời bạn xem lại", "", MessageBoxButtons.OK);
                    this.Close();
                }
                dataReader.Read();
                result = int.Parse(dataReader.GetValue(0).ToString());
                dataReader.Close();

                if (result == -1)
                {
                    MessageBox.Show("Lỗi kết nối với database. Mời bạn xem lại", "", MessageBoxButtons.OK);
                    this.Close();
                }
                if (result == 1)
                {
                    this.errorTenMon.SetError(tenMon, "Tên môn học đã tồn tại!");
                    return false;
                }
            }

            if (flag == false)
            {
                if (!this.maMon.Text.Trim().ToString().Equals(oldMaMonHoc))// Nếu mã môn học thay đổi so với ban đầu
                {
                    //TODO: Check mã môn học có tồn tại chưa
                    string queryMa = "DECLARE  @return_value int \n"
                                + "EXEC @return_value = SP_CHECKID \n"
                                + "@Code = N'" + maMon.Text + "',@Type = N'MAMONHOC' \n"
                                + "SELECT 'Return Value' = @return_value";

                    int result = -1;
                    SqlDataReader dataReader = Program.ExecSqlDataReader(queryMa);

                    // nếu null thì thoát luôn  ==> lỗi kết nối
                    if (dataReader == null)
                    {
                        MessageBox.Show("Lỗi kết nối với database. Mời bạn xem lại", "", MessageBoxButtons.OK);
                        this.Close();
                    }
                    dataReader.Read();
                    result = int.Parse(dataReader.GetValue(0).ToString());
                    dataReader.Close();

                    if (result == 1)
                    {
                        this.errorMaMon.SetError(maMon, "Mã môn học đã tồn tại!");
                        return false;
                    }
                }
                if (!this.tenMon.Text.Trim().ToString().Equals(oldTenMonHoc))// Nếu tên môn học thay đổi so với ban đầu
                {
                    // TODO : Check tên môn học có tồn tại chưa
                    string queryTen = "DECLARE  @return_value int \n"
                                + "EXEC @return_value = SP_CHECKNAME \n"
                                + "@Name = N'" + tenMon.Text + "',@Type = N'TENMONHOC' \n"
                                + "SELECT 'Return Value' = @return_value";

                    int result = -1;
                    SqlDataReader dataReader = Program.ExecSqlDataReader(queryTen);

                    // nếu null thì thoát luôn  ==> lỗi kết nối
                    if (dataReader == null)
                    {
                        MessageBox.Show("Lỗi kết nối với database. Mời bạn xem lại", "", MessageBoxButtons.OK);
                        this.Close();
                    }
                    dataReader.Read();
                    result = int.Parse(dataReader.GetValue(0).ToString());
                    dataReader.Close();

                    if (result == -1)
                    {
                        MessageBox.Show("Lỗi kết nối với database. Mời bạn xem lại", "", MessageBoxButtons.OK);
                        this.Close();
                    }
                    if (result == 1)
                    {
                        this.errorTenMon.SetError(tenMon, "Tên môn học đã tồn tại!");
                        return false;
                    }
                }
            }

            return true;
        }
    }
}